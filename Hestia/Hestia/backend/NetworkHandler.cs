using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System;
using System.Net;
using System.Runtime.Serialization;

namespace Hestia.backend
{

    public class NetworkHandler : ISerializable
    {
        private string ip;
        private int port;
        private RestClient client;

        public NetworkHandler(string ip, int port)
        {
            this.ip = ip;
            this.port = port;

            Uri baseUrl = GetBaseUrl();
            client = new RestClient(baseUrl);

            // Trust all ssl certificates
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public void SetIpAndPort(string ip, int port)
        {
            this.ip = ip;
            this.port = port;

            Uri baseUrl = GetBaseUrl();
            client = new RestClient(baseUrl);
        }

        public JToken Get(string endpoint)
        {
            var request = new RestRequest(endpoint, Method.GET);
            JToken jsonResponse = ExecuteRequest(request);

            return jsonResponse;
        }

       public JToken Post(JObject payload, string endpoint)
        {
            var request = new RestRequest(endpoint, Method.POST);

            request.AddParameter("application/json; charset=utf-8", payload, ParameterType.RequestBody);
            request.RequestFormat = DataFormat.Json;
            JToken jsonResponse = ExecuteRequest(request);

            return jsonResponse;
        }
        
        public JToken Delete(string endpoint)
        {
            var request = new RestRequest(endpoint, Method.DELETE);
            JToken jsonResponse = ExecuteRequest(request);

            return jsonResponse;
        }

        public JToken Put(JObject payload, string endpoint)
        {
            var request = new RestRequest(endpoint, Method.PUT);

            request.AddParameter("application/json; charset=utf-8", payload, ParameterType.RequestBody);
            request.RequestFormat = DataFormat.Json;
            JToken jsonResponse = ExecuteRequest(request);

            return jsonResponse;
        }

        private JToken ExecuteRequest(RestRequest request)
        {
            request.Timeout = 2000;
            IRestResponse response = client.Execute(request);

            string responseContent = response.Content;
            JToken jsonResponse;
            if (response.IsSuccessful)
            {
                jsonResponse = JToken.Parse(responseContent);
            }
            else
            {
                try
                {
                    jsonResponse = JToken.Parse(responseContent);
                }
                catch (JsonReaderException ex)
                {
                    // Exception in parsing json, server did not respond or response was not in json format.
                    Console.WriteLine(ex.Message);
                    string jsonError = "{ \"error\": \"something went wrong\" }";
                    jsonResponse = JToken.Parse(jsonError);
                }
            }

            return jsonResponse;
        }

        private Uri GetBaseUrl()
        {
            return new Uri("https://" + ip + ":" + port + "/");
        }

        // Stub generated by serializable interface
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            throw new NotImplementedException();
        }
    }
}

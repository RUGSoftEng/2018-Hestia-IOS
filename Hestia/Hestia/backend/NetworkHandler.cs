using System;
using System.Net;
using System.Net.Http;
using System.Runtime.Serialization;
using System.Threading.Tasks;
using RestSharp;

namespace Hestia.backend
{
    /*
     * Note that the network handler in hestia android extends from application and uses serializable.
     * I have made sure that the package required for this is in the config, Application is something else though.
     */
    class NetworkHandler : ISerializable
    {
        private string ip;
        private int port;
        private RestClient client;

        public NetworkHandler(string ip, int port)
        {
            this.ip = ip;
            this.port = port;

            Uri baseUrl = GetBaseUrl();
            client = new RestClient(baseUrl);

            // Trust all ssl certificates
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public void SetIpAndPort(string ip, int port)
        {
            this.ip = ip;
            this.port = port;

            Uri baseUrl = GetBaseUrl();
            client = new RestClient(baseUrl);
        }

        public string Get(string endpoint)
        {
            var request = new RestRequest(endpoint, Method.GET);

            IRestResponse response = client.Execute(request);
            var content = response.Content;

            return content;
        }

       public string Post(string payload, string endpoint)
        {
            var request = new RestRequest(endpoint, Method.POST);

            request.AddParameter("application/json; charset=utf-8", payload, ParameterType.RequestBody);
            request.RequestFormat = DataFormat.Json;

            IRestResponse response = client.Execute(request);
            var content = response.Content;

            return content;
        }
        
        public string Delete(string endpoint)
        {
            var request = new RestRequest(endpoint, Method.DELETE);

            IRestResponse response = client.Execute(request);
            var content = response.Content;

            return content;
        }

        public string Put(string payload, string endpoint)
        {
            var request = new RestRequest(endpoint, Method.PUT);

            request.AddParameter("application/json; charset=utf-8", payload, ParameterType.RequestBody);
            request.RequestFormat = DataFormat.Json;

            IRestResponse response = client.Execute(request);
            var content = response.Content;

            return content;
        }

        private Uri GetBaseUrl()
        {
            return new Uri("https://" + ip + ":" + port + "/");
        }

        // Stub generated by serializable interface
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            throw new NotImplementedException();
        }
    }
}

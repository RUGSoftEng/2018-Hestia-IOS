using System;
using System.Net;
using System.Net.Http;
using System.Runtime.Serialization;
using System.Threading.Tasks;

namespace Hestia.backend
{
    /*
     * Note that the network handler in hestia android extends from application and uses serializable.
     * I have made sure that the package required for this is in the config, Application is something else though.
     */
    class NetworkHandler : ISerializable
    {
        private string ip;
        private int port;
        HttpClient client;

        public string Ip { get; set; }
        public int Port { get; set; }

        public NetworkHandler(string ip, int port)
        {
            this.ip = ip;
            this.port = port;
            client = new HttpClient();

            // Trust all ssl certificates
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        public async Task<string> Get(string endpoint)
        {
            Uri uri = new Uri(GetDefaultUri() + endpoint);

            HttpResponseMessage response = await client.GetAsync(uri);
            string responseString = await response.Content.ReadAsStringAsync();
            
            return responseString;
        }

        public async Task<string> Post(string jsonString, string endpoint)
        {
            HttpContent content = new StringContent(jsonString);
            Uri uri = new Uri(GetDefaultUri() + endpoint);

            HttpResponseMessage response = await client.PostAsync(uri, content);
            string responseString = await response.Content.ReadAsStringAsync();

            return responseString;
        }

        public void delete()
        {
           
        } 

        public void put()
        {

        }

        private String GetDefaultUri()
        {
            return "https://" + ip + ":" + port + "/";
        }

        // Stub generated by serializable interface
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            throw new NotImplementedException();
        }
    }
}
